// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SCADA.Data;

#nullable disable

namespace SCADA.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SCADA.Model.Alarm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<double>("Threshold")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("SCADA.Model.AlarmActivated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlarmId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.ToTable("AlarmsActivated");
                });

            modelBuilder.Entity("SCADA.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IOAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Tag");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SCADA.Model.TagRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IOAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagRecords");
                });

            modelBuilder.Entity("SCADA.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SCADA.Model.AnalogInput", b =>
                {
                    b.HasBaseType("SCADA.Model.Tag");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("HighLimit")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsScanOn")
                        .HasColumnType("boolean");

                    b.Property<double>("LowLimit")
                        .HasColumnType("double precision");

                    b.Property<double>("ScanTime")
                        .HasColumnType("double precision");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Tag", t =>
                        {
                            t.Property("Driver")
                                .HasColumnName("AnalogInput_Driver");

                            t.Property("HighLimit")
                                .HasColumnName("AnalogInput_HighLimit");

                            t.Property("IsScanOn")
                                .HasColumnName("AnalogInput_IsScanOn");

                            t.Property("LowLimit")
                                .HasColumnName("AnalogInput_LowLimit");

                            t.Property("ScanTime")
                                .HasColumnName("AnalogInput_ScanTime");

                            t.Property("Units")
                                .HasColumnName("AnalogInput_Units");
                        });

                    b.HasDiscriminator().HasValue("AnalogInput");
                });

            modelBuilder.Entity("SCADA.Model.AnalogOutput", b =>
                {
                    b.HasBaseType("SCADA.Model.Tag");

                    b.Property<double>("HighLimit")
                        .HasColumnType("double precision");

                    b.Property<double>("InitialValue")
                        .HasColumnType("double precision");

                    b.Property<double>("LowLimit")
                        .HasColumnType("double precision");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Tag", t =>
                        {
                            t.Property("InitialValue")
                                .HasColumnName("AnalogOutput_InitialValue");
                        });

                    b.HasDiscriminator().HasValue("AnalogOutput");
                });

            modelBuilder.Entity("SCADA.Model.DigitalInput", b =>
                {
                    b.HasBaseType("SCADA.Model.Tag");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsScanOn")
                        .HasColumnType("boolean");

                    b.Property<double>("ScanTime")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("DigitalInput");
                });

            modelBuilder.Entity("SCADA.Model.DigitalOutput", b =>
                {
                    b.HasBaseType("SCADA.Model.Tag");

                    b.Property<double>("InitialValue")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("DigitalOutput");
                });

            modelBuilder.Entity("SCADA.Model.Alarm", b =>
                {
                    b.HasOne("SCADA.Model.AnalogInput", "AnalogInput")
                        .WithMany("Alarms")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalogInput");
                });

            modelBuilder.Entity("SCADA.Model.AlarmActivated", b =>
                {
                    b.HasOne("SCADA.Model.Alarm", "Alarm")
                        .WithMany()
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alarm");
                });

            modelBuilder.Entity("SCADA.Model.TagRecord", b =>
                {
                    b.HasOne("SCADA.Model.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SCADA.Model.AnalogInput", b =>
                {
                    b.Navigation("Alarms");
                });
#pragma warning restore 612, 618
        }
    }
}
